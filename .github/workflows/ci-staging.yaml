name: CI/CD Staging Pipeline (CI - Lint, Test, Build)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'

permissions:
  contents: write
  packages: write

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo $GITHUB_REF | sed -n 's/refs\/tags\/v//p')" >> $GITHUB_OUTPUT
  check-service:
    uses: libreconnect/infrastructure/.github/workflows/check-service.yaml@main
    with:
      repository: libreconnect/ferriscompany
      ref: main
    secrets:
      PAT: ${{ secrets.GITHUB_TOKEN }}
  build-and-push:
    needs: [check-service, extract-version]
    uses: libreconnect/infrastructure/.github/workflows/build-and-push.yaml@main
    with:
      registry: ghcr.io
      repository: libreconnect/ferriscare
      ref: main
      tag: ${{ needs.extract-version.outputs.version }}
      registry_username: ${{ github.actor }}
    secrets:
      PAT: ${{ secrets.GITHUB_TOKEN }}
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [extract-version]
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: 'libreconnect/infrastructure'
          ref: 'main'
          token: ${{ secrets.PAT }}
      - name: Update deployment.yaml
        env:
          VERSION: ${{ needs.extract-version.outputs.version }} 
        run: |
          echo "DÃ©ploiement de la version $VERSION sur l'environnement staging"
          yq -ie ".ferriscare.image.tag = \"$VERSION\"" applications/ferriscare/chart/environments/staging/values.yaml
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add applications/ferriscare/chart/environments/staging/values.yaml
          git commit -m "Deploying the $VERSION version on the staging environment"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          VERSION: ${{ needs.extract-version.outputs.version }}